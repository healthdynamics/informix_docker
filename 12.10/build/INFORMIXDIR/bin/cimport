#!/bin/bash

################################################################################
# Copyright (c) 2014, the informix-docker project authors.                     #
# Please see the AUTHORS file for details. All rights reserved. Use of this    #
# source code is governed by the BSD 3 Clause license, a copy of which can be  #
# found in the LICENSE file.                                                   #
################################################################################

log () {
	echo "$1"
	logger -t "import" "$1"
}

error () {
        log "$0:$1 $2 failed [status:$3]"
        exit 1
}

setup(){
	mkdir -p /tmp/import/extracted
	chmod -R 711 /tmp/import

	log "Generating optimized onconfig for imports [$INFORMIXETCDIR/onconfig.import]."

	generate_onconfig_import

	rm /home/informix/.bashrc
        ln -s $INFORMIXETCDIR/cimport.bashrc /home/informix/.bashrc

	. $HOME/.bashrc

	log "Starting Informix in Single User mode [oninit -j]."

	oninit -j

}

teardown () {
	rm -rf /tmp/import

	log "Shutting down Informix [onmode -ky]."
	onmode -ky

	rm /home/informix/.bashrc
	ln -s $INFORMIXETCDIR/all.bashrc /home/informix/.bashrc

}

import () {
	log "Getting export file [$1]."
	get_file $1 /tmp/import/import.tar
	tar -C /tmp/import/extracted -xf /tmp/import/import.tar
	file=`basename $1`
	basedir="/tmp/import/extracted/$file"

	if [ -z $2 ]; then
		dbs=()
		for f in `ls -d $basedir/*.exp`; do
			dbs+=(`basename $f .exp`)
		done
	else
		IFS=':' read -a dbs <<< "$2"
	fi

	echo "dbs ${dbs[@]}"

	for db in "${dbs[@]}"
	do
		import_db $basedir $db
        done

	log "Import completed".
}

import_db () {
	if [[ "" != "$(echo "select * from sysdatabases where name='$2'" | dbaccess sysmaster | grep $2)" ]]; then
		log "Dropping database [$2]".
                cmd="DROP DATABASE $2"
                echo $cmd | dbaccess
	fi

        log "Importing database [$2]."
        #TODO provide flag for -d
        dbimport $2 -d $2 -i $1
        log "Enabling transactions [ontape -s -B $2 -t /dev/null]."
        echo 0 | ontape -s -B $2 -t /dev/null

}


trap 'error $SCRIPT $LINENO "$BASH_COMMAND" $?' ERR
set -e
trap teardown SIGINT SIGTERM EXIT

setup

import $1 $2

exit 0	

