#!/bin/bash

################################################################################
# Copyright (c) 2014, the informix-sa project authors.                         #
# Please see the AUTHORS file for details. All rights reserved. Use of this    #
# source code is governed by the BSD 3 Clause license, a copy of which can be  #
# found in the LICENSE file.                                                   #
################################################################################

# Main entrypoint for the Docker container.

log () {
	echo "$1"
	logger -t "entrypoint" "$1"
}

move_and_link_directory () {

	if [ ! -e $2 ]; then
                mkdir $2
        fi

 	if [ -e $1 ]; then
                rm -Rf $1
		ln -s $2 $1
        fi

	chown informix:informix $2
}

ensure_directory () {
	if [ ! -e $1 ]; then
		mkdir -p $1
	fi
	chown -R informix:informix $1 
	chmod 770 $1
}

link () {
	if [ ! -e $2 ]; then
		ln -s $1 $2
		chown -h informix:informix $2
	fi
}


adjust_filesystem () {

	fix_dev_files

	ensure_directory $INFORMIXDATADIR
        ensure_directory $INFORMIXVARDIR
        ensure_directory $INFORMIXCHUNKSDIR
        ensure_directory $INFORMIXDEVLINKSDIR 

	move_and_link_directory $INFORMIXDIR/tmp $INFORMIXDATADIR/tmp
	move_and_link_directory /INFORMIXTMP $INFORMIXDATADIR/INFORMIXTMP
	
	ensure_directory $INFORMIXDATADIR/tapedev

        link $INFORMIXDATADIR/tapedev $LTAPEDEV

	if [ -e $INFORMIXINITDIR/put_file ]; then
        	link $INFORMIXINITDIR/put_file $INFORMIXBINDIR/put_file
        else
                link  $INFORMIXBINDIR/put_filesystem_file $INFORMIXBINDIR/put_file
        fi

        if [ -e $INFORMIXINITDIR/get_file ]; then
                link $INFORMIXINITDIR/get_file $INFORMIXBINDIR/get_file
        else
                link $INFORMIXBINDIR/get_filesystem_file $INFORMIXBINDIR/get_file
        fi

}

generate_configuration () {

	if [ -e $INFORMIXETCDIR/sqlhosts.informix ]; then
		rm -f $INFORMIXETCDIR/sqlhosts.informix
	fi	

	log "Generating sqlhosts file."
        echo "informix_shm         onipcshm        $HOSTNAME       fakeport" >> $INFORMIXETCDIR/sqlhosts.informix
        echo "informix_tcp         onsoctcp        $HOSTNAME       sqlexec" >> $INFORMIXETCDIR/sqlhosts.informix

        if [ ! -e /etc/services.orig ]; then
                cp /etc/services /etc/services.orig
        fi

        cp /etc/services.orig /etc/services

        echo "sqlexec        1536/tcp       #IBM Informix" >> /etc/services

	if [ ! -z $PASSWORD ]; then
                echo "informix:$PASSWORD" | chpasswd -e
        fi

}

ensure_instance_created () {
	if [ ! -e $INFORMIXDATADIR/installed ]; then
		rm -rf $INFORMIXCHUNKSDIR/*
		rm -f $INFORMIXDEVLINKSDIR/*
		if [ -e $INFORMIXINITDIR/create_instance ]; then
			log "Creating instance [$INFORMIXINITDIR/create_instance]."
			chmod 700 $INFORMIXINITDIR/create_instance
			su - informix -c "$INFORMIXINITDIR/create_instance"
		else
			log "Creating instance [create_instance_simple]."
			su - informix -c "create_instance_simple"
		fi
		touch $INFORMIXDATADIR/installed
	fi

}

error () {
        log "$0:$1 $2 failed [status:$3]"
        echo "An error occurred [script: $0, line $1, command $2, error: $3]." 
        exit 1
}

set_ev (){
	sed -i 's|'^$1.*'|'$2'|g' $3
}

process_container_variables () {
	if [ ! -z $STORAGE_PATH_PREFIX ]; then
                set_ev "STORAGE_PATH_PREFIX" $STORAGE_PATH_PREFIX /usr/lib/informix/etc/all.bashrc
        fi

        if [ ! -z $PRIVATEKEY ]; then
                set_ev "PRIVATEKEY" $PRIVATEKEY /usr/lib/informix/etc/all.bashrc
        fi

        if [ ! -z $BASELINESCHEDULE ]; then
                set_ev "BASELINESCHEDULE" $BASELINESCHEDULE /usr/lib/informix/etc/cserve.bashrc
        fi

        if [ ! -z $FLUSHINTERVAL ]; then
                set_ev "FLUSHINTERVAL" $FLUSHINTERVAL /usr/lib/informix/etc/cserve.bashrc
        fi

        . /usr/lib/informix/etc/all.bashrc

}

redirect_online_log () {
	log "Redirecting Informix log to syslog [$INFORMIXLOGDIR/online.log]."

        if [ ! -e $INFORMIXLOGDIR ]; then
                mkdir $INFORMIXLOGDIR
        fi

        touch $INFORMIXLOGDIR/online.log

        chown -R informix:informix $INFORMIXLOGDIR

	service rsyslog start
        tail -f $INFORMIXLOGDIR/online.log | awk -Winteractive '$1="";/^\d*/ {print }' | logger -t informix &

	cron
}

fix_dev_files () {
        $INFORMIXBINDIR/fix_dev_files
}

ensure_environment () {
	process_container_variables
	adjust_filesystem
	generate_configuration
	redirect_online_log
}


setup () {

	ensure_environment
	ensure_instance_created

}

teardown () {
	log "Killing background jobs."
	kill $(ps -ef | awk '/^syslog/ {print $2}')	
	kill $(ps -ef | awk '$8=="cron" {print $2}')
}

run_command () {

	myargs=($@)
	cmdargs=("${myargs[@]:1:${#myargs[@]}}")
	case $1 in import)
		su - informix -c "cimport $cmdargs"
		;;
	export)
		su - informix -c "cexport $cmdargs"
                ;;
	serve)
		 su - informix -c "cserve $cmdargs"
                ;;
	backup)
		su - informix -c "cbackup $cmdargs"
		;;
	restore)
		su - informix -c "crestore $cmdargs"
		;;
	migrate)
		su - informix -c "cmigrate $cmdargs"
		;;
	*)
		if [ -z "$1" ]; then
                	su - informix -c "cserve"
        	else
			echo "Unknown command $1"
		fi	
		;;
	esac

}

error () {
        log "$0:$1 $2 failed [status:$3]"
        echo "An error occurred [script: $0, line $1, command $2, error: $3]." 
        exit 1
}

trap 'error $SCRIPT $LINENO "$BASH_COMMAND" $?' ERR
set -e
trap teardown SIGINT SIGTERM EXIT

log "entrypoint [$@]."

setup
run_command $@

exit 0 

